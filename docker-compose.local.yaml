version: '3.9'

services:

  app:
    image: 'customer-app:latest'
    build:
      context: .
      args:
        GROUP_ID: "${GROUP_ID}"
        USER_ID: "${USER_ID}"
      dockerfile: Dockerfile
    restart: always
    environment:
      - "APPLICATION_DEBUG=${APPLICATION_DEBUG}"
      - "APPLICATION_VERSION=${APPLICATION_VERSION}"
      - "APPLICATION_DESCRIPTION=${APPLICATION_DESCRIPTION}"
      - "DATABASE_HOST=${DATABASE_HOST}"
      - "DATABASE_PORT=${DATABASE_PORT}"
      - "DATABASE_DATABASE=${DATABASE_DATABASE}"
      - "DATABASE_USERNAME=${DATABASE_USERNAME}"
      - "DATABASE_PASSWORD=${DATABASE_PASSWORD}"
    ports:
      - '${DOCKER_APPLICATION_EXPOSE_PORT}:${WEB_APPLICATION_PORT}'
    entrypoint: [
      "uvicorn", "interface.web.app:web_app",
      "--host", "0.0.0.0",
      "--port", "${WEB_APPLICATION_PORT}",
      "--factory",
      "--reload",
    ]
    depends_on:
      database:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    volumes:
      - ./src:/app

  rabbitmq:
    image: rabbitmq:4.0.5-management
    hostname: rabbitmq
    ports:
      - '${DOCKER_RABBITMQ_EXPOSE_PORT}:15672'
    restart: always
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    environment:
      - "RABBITMQ_DEFAULT_USER=dev"
      - "RABBITMQ_DEFAULT_PASS=devdev"
      - "RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS=-rabbit log_levels [{connection,error},{default,error}]"
    healthcheck:
      test: rabbitmq-diagnostics check_port_connectivity
      interval: 1s
      timeout: 10s
      retries: 10

  rabbit-mq-setup:
    image: alpine
    entrypoint: [ "sh","-c" ]
    command:
      - |
        apk -q add curl python3

        curl --no-progress-meter -s -o /usr/local/bin/rabbitmqadmin http://${RABBITMQ_SETUP_RABBIT_HOST}:${RABBITMQ_SETUP_RABBIT_PORT}/cli/rabbitmqadmin
        chmod +x /usr/local/bin/rabbitmqadmin

        alias rabbitmqadmin="rabbitmqadmin --host=${RABBITMQ_SETUP_RABBIT_HOST} --port=${RABBITMQ_SETUP_RABBIT_PORT} --username=${RABBITMQ_SETUP_RABBIT_USERNAME} --password=${RABBITMQ_SETUP_RABBIT_PASSWORD}"

        rabbitmqadmin -q declare queue name=${RABBITMQ_SETUP_RABBIT_COMMENTS_QUEUE} durable=true
        rabbitmqadmin -q declare queue name=${RABBITMQ_SETUP_RABBIT_PRODUCTS_QUEUE} durable=true
        rabbitmqadmin -q declare queue name=${RABBITMQ_SETUP_RABBIT_ORDERS_QUEUE} durable=true
        rabbitmqadmin -q declare queue name=${RABBITMQ_SETUP_RABBIT_CATEGORY_QUEUE} durable=true
    depends_on:
      rabbitmq:
        condition: service_healthy

  database:
    image: 'postgres:latest'
    restart: always
    environment:
      - "POSTGRES_USER=${POSTGRES_USER}"
      - "POSTGRES_PASSWORD=${POSTGRES_PASSWORD}"
      - "POSTGRES_DB=${POSTGRES_DB}"
    ports:
      - '${DOCKER_DATABASE_EXPOSE_PORT}:5432'
    volumes:
      - customer_app_db:/var/lib/postgresql/data/
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 1s
      timeout: 10s
      retries: 10

volumes:
  customer_app_db:
  rabbitmq_data:
